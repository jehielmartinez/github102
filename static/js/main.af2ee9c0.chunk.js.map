{"version":3,"sources":["components/Element.js","functions/brain.js","functions/checkWinner.js","containers/App.js","serviceWorker.js","index.js"],"names":["Element","value","handleClick","data-testid","onClick","className","brain","arr","patterns","0","1","2","3","4","5","6","7","8","bestResult","bestIndex","sameResultsIndex","sameResultValue","i","length","result","forEach","test","testStr","map","index","join","push","randomIndex","Math","floor","random","areEqual","len","arguments","checkWinner","App","useState","setArr","machinePlaying","setMachinePlaying","newGame","machinePlay","a","includes","swal","then","newArr","setTimeout","text","icon","key","humanPlay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.af2ee9c0.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Element ({ value, handleClick }) {\n  return (\n    <div\n      data-testid='element'\n      onClick={handleClick}\n      className='element'\n    >\n      {value === 'a' ? null : value}\n    </div>\n  )\n}\n\nexport default Element\n","function brain (arr) {\n  const patterns = {\n    0: [[1, 2], [4, 8], [3, 6]],\n    1: [[0], [2], [4, 7]],\n    2: [[1, 0], [4, 6], [5, 8]],\n    3: [[0], [4, 5], [6]],\n    4: [[0], [1], [2], [3], [5], [6], [7], [8]],\n    5: [[2], [4, 3], [8]],\n    6: [[3, 0], [4, 2], [7, 8]],\n    7: [[6], [4, 1], [8]],\n    8: [[5, 2], [4, 0], [7, 6]]\n  }\n\n  let bestResult = 1\n  let bestIndex = 0\n  const sameResultsIndex = []\n  let sameResultValue = 0\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'a') {\n      let result = 0\n\n      patterns[i].forEach(test => {\n        const testStr = test.map(index => arr[index]).join()\n        if (testStr === 'x' || testStr === 'o') {\n          result = result + 1\n        } else if (testStr === 'x,x' || testStr === 'o,o') {\n          result = result + 2\n        } else if (testStr === 'x,o' || testStr === 'o,x') {\n          result = result + 0\n        } else if (testStr === 'x,a' || testStr === 'a,x') {\n          result = result + 1\n        } else if (testStr === 'a,x' || testStr === 'a,o') {\n          result = result + 1\n        }\n      })\n      if (result > bestResult) {\n        bestResult = result\n        bestIndex = i\n      } else if (result === bestResult) {\n        sameResultsIndex.push(i)\n        sameResultValue = result\n      }\n    }\n  }\n\n  if (sameResultValue >= bestResult) {\n    const randomIndex = sameResultsIndex[Math.floor(Math.random() * sameResultsIndex.length)]\n    arr[randomIndex] = 'o'\n  } else {\n    arr[bestIndex] = 'o'\n  }\n\n  return arr\n};\n\nexport default brain\n","function checkWinner (arr) {\n  if (areEqual(arr[0], arr[1], arr[2]) ||\n        areEqual(arr[3], arr[4], arr[5]) ||\n        areEqual(arr[6], arr[7], arr[8]) ||\n\n        areEqual(arr[0], arr[4], arr[8]) ||\n        areEqual(arr[2], arr[4], arr[6]) ||\n\n        areEqual(arr[0], arr[3], arr[6]) ||\n        areEqual(arr[1], arr[4], arr[7]) ||\n        areEqual(arr[2], arr[5], arr[8])\n  ) {\n    return true\n  } else {\n    return false\n  }\n}\n\nfunction areEqual () {\n  const len = arguments.length\n  for (let i = 1; i < len; i++) {\n    if (arguments[i] === 'a' || arguments[i] !== arguments[i - 1]) { return false }\n  }\n  return true\n}\n\nexport default checkWinner\n","import React, { useState } from 'react'\nimport swal from 'sweetalert'\nimport Element from '../components/Element'\nimport brain from '../functions/brain'\nimport '../styles/App.css'\nimport checkWinner from '../functions/checkWinner'\n\nfunction App () {\n  const [arr, setArr] = useState(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'])\n  const [machinePlaying, setMachinePlaying] = useState(false)\n\n  const newGame = () => {\n    setArr(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a'])\n    setMachinePlaying(false)\n  }\n\n  const humanPlay = (index) => {\n    if (machinePlaying) {\n      swal({\n        text: 'Tenga Paciencia',\n        icon: 'warning'\n      })\n    } else if (arr[index] === 'a') {\n      arr[index] = 'x'\n      setArr([...arr])\n\n      if (checkWinner(arr)) {\n        swal({\n          text: 'Humano Ganaste!',\n          icon: 'success'\n        }).then(() => newGame())\n      } else {\n        machinePlay()\n      }\n    } else {\n      swal({\n        text: 'No puedes marcar alli',\n        icon: 'error'\n      })\n    }\n  }\n\n  const machinePlay = async () => {\n    setMachinePlaying(true)\n    if (!arr.includes('a')) {\n      swal('Empate!').then(() =>\n        newGame()\n      )\n    } else {\n      const newArr = await brain(arr)\n      setTimeout(() => {\n        setArr([...newArr])\n        if (checkWinner(arr)) {\n          swal({\n            text: 'Computadora Ganaste!',\n            icon: 'success'\n          }).then(() => newGame())\n        } else {\n          setMachinePlaying(false)\n        }\n      }, 1000)\n    }\n  }\n\n  return (\n    <div data-testid='main-container' className='main-container'>\n      <h1>Ultimate Tic Tac Toe Engine</h1>\n      <div data-testid='board' className='board'>\n        {arr.map((value, index) => (\n          <Element\n            key={index}\n            handleClick={() => humanPlay(index)}\n            value={value}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\nserviceWorker.unregister()\n"],"sourceRoot":""}